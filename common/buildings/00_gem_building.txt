#############
# Building Documentation
#############

@forced_weight = 1000

# might be outdated/contain untested features
building_gem_spire1 = {
	base_buildtime = @b1_time
	position_priority = 200
	base_cap_amount = 2
	
	category = amenity
	
	potential = {
		exists = owner
		is_geo_empire = yes
	}
	
	allow = {
#		buildings_simple_allow = yes
	}
	
	destroy_trigger = {
		owner = {
			NOR = {
				has_origin = origin_crystal_gems
				is_geo_empire = yes
			}
		}
	}
	
	planet_modifier = {
		job_clerk_add = 1
		job_technician_add = 1
		planet_amenities_add = 8
	}
	
	resources = {
		category = planet_buildings
		produces = {
		unity = 4
		}
		upkeep = {
		energy =  @b1_upkeep
		}
		cost = {
		minerals = @b1_minerals
		}
	}
	
	upgrades = {
		building_gem_spire2
	}

	ai_weight = {
		base = 1000
		modifier = {
			factor = 0.1
			or = {
				has_building = building_gem_spire1
				has_building = building_gem_spire2
				has_building = building_gem_spire3
			}
		}
	}
}

building_gem_spire2 = {
	base_buildtime = @b2_time
	can_build = no
	position_priority = 200
	
	category = amenity
	
	potential = {
		exists = owner
		is_geo_empire = yes
	}
	
	allow = {
		has_upgraded_capital = yes
	}
	
	destroy_trigger = {
		owner = {
			NOR = {
				has_origin = origin_crystal_gems
				is_geo_empire = yes
			}
		}
	}

	planet_modifier = {
		job_clerk_add = 2
		job_culture_worker_add = 1
		job_technician_add = 1.5
		planet_amenities_add = 12
	}
	
	resources = {
		category = planet_buildings
		produces = {
		unity = 8
		}
		upkeep = {
		energy =  @b2_upkeep
		}
		cost = {
		minerals = @b2_minerals
		}
	}
	
	upgrades = {
		building_gem_spire3
	}
	
	ai_weight = {
		base = 1000
	}
}

building_gem_spire3 = {
	base_buildtime = @b3_time
	can_build = no
	position_priority = 200
	
	category = amenity
	
	potential = {
		exists = owner
		is_geo_empire = yes
	}
	
	allow = {
		has_upgraded_capital = yes
		OR = {
			is_capital = yes
			owner = { has_technology = tech_housing_1 }
		}
	}
	
	destroy_trigger = {
		owner = {
			NOR = {
				is_geo_empire = yes
				has_origin = origin_crystal_gems
			}
		}
	}
	triggered_planet_modifier = {
		potential = { owner = { is_geo_empire = yes } }
		job_noble_add = 1
	}
	planet_modifier = {
		job_culture_worker_add = 2
		job_clerk_add = 2
		job_technician_add = 2
		planet_amenities_add = 16
	}
	
	resources = {
		category = planet_buildings
		produces = {
		unity = 12
		}
		upkeep = {
		energy =  @b3_upkeep
		}
		cost = {
		minerals = @b3_minerals
		}
	}
	
	ai_weight = {
		base = 1000
	}
}

building_buff_kindergarten1 = {
	base_buildtime = 360
	category = pop_assembly
	# is_essential = yes
	additional_ai_weight = 200
	ai_estimate_without_unemployment = yes
	
	position_priority = 10
	can_demolish = yes
	base_cap_amount = 1
	
	potential = {
		exists = owner
		owner = {
			OR = {
				is_geo_empire = yes
			}
		}
	}
	
	allow = {
		OR = {
			is_geo_empire = yes
		}
	}
	
	destroy_trigger = {
		owner = {
			NOR = {
				is_geo_empire = yes
				has_origin = origin_crystal_gems
			}
		}
	}
	
	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				is_geo_empire = yes
				NOT = { has_authority = auth_hive_mind }
			}			
		}
		modifier = { # Adjust for Balance
			job_kindergartener_add = 1
			planet_pop_assembly_organic_mult = 0.05
			job_roboticist_add = -2
		}
	}
	triggered_desc = {
		trigger = {
			exists = owner
			owner = {
				is_geo_empire = yes
				NOT = { has_authority = auth_hive_mind }
			}
		}
		text = job_kindergartener_effect_desc
	}
	
	triggered_planet_modifier = {
		potential = {
			owner = {
				has_authority = auth_hive_mind
			}
		}
		modifier = { # Adjust for Balance
			job_spawning_drone_add = 1
		}
	}
	
	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { has_origin = origin_crystal_gems }		
		}
		modifier = { # Adjust for Balance
			job_kindergartener_add = 1
			planet_amenities_add = 5
			job_roboticist_add = -2
		}
	}
	
	resources = {
		category = planet_buildings
		produces = {
		}
		upkeep = {
		energy =  1
		minerals =  @b1_upkeep
		}
		cost = {
		minerals = @b1_minerals
		}
	}
	on_built = {
		if = {
			limit = { NOT = { is_variable_set = f93_gems_made } }
			set_variable = { which = f93_gems_made value = 0 }
			set_variable = { which = f93_gem_efficency value = 2 }
			export_trigger_value_to_variable = {
				trigger = planet_size
				variable = f93_gems_limit
			}
			multiply_variable = { which = f93_gems_limit value = 3 }
		}
	}
	upgrades = {
		building_buff_kindergarten2
	}
	ai_weight = {
		base = 1000
	}
}


building_buff_kindergarten2 = {
	base_buildtime = 720
	category = pop_assembly
	# is_essential = yes
	additional_ai_weight = 200
	ai_estimate_without_unemployment = yes
	
	position_priority = 10
	can_demolish = yes
	
	can_build = no
	
	potential = {
		exists = owner
		owner = {
			OR = { 
				is_geo_empire = yes
				has_origin = origin_crystal_gems
			} 
		}
	}
	
	allow = {
		has_upgraded_capital = yes
		owner = { has_technology = tech_housing_1 }
		OR = {
			has_deposit = d_kindergarten_small
			has_deposit = d_kindergarten_med
			has_deposit = d_kindergarten_large
		}
	}
	
	destroy_trigger = {
		owner = {
			NOR = {
				has_origin = origin_crystal_gems
				is_geo_empire = yes
			}
		}
	}
	
	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				is_geo_empire = yes
				NOT = { has_authority = auth_hive_mind }
			}			
		}
		modifier = { # Adjust for Balance
			job_kindergartener_add = 1
			planet_pop_assembly_organic_mult = 0.1
			job_roboticist_add = -2
		}
	}
 
	triggered_desc = {
		trigger = {
			exists = owner
			owner = {
				is_geo_empire = yes
				NOT = { has_authority = auth_hive_mind }
			}
		}
		text = job_kindergartener_effect_desc
	}
	
	triggered_planet_modifier = {
		potential = {
			owner = {
				has_authority = auth_hive_mind
			}
		}
		modifier = { # Adjust for Balance
			job_spawning_drone_add = 2
		}
	}
	
	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { has_origin = origin_crystal_gems }		
		}
		modifier = { # Adjust for Balance
			job_kindergartener_add = 2
			planet_amenities_add = 10
			job_roboticist_add = -2
		}
	}
	
	resources = {
		category = planet_buildings
		produces = {
		}
		upkeep = {
		energy =  1
		minerals =  @b2_upkeep
		}
		cost = {
		minerals = @b2_minerals
		}
	}
	upgrades = {
		building_buff_kindergarten3
	}
	ai_weight = {
		base = 1000
	}
}

building_buff_kindergarten3 = {
	base_buildtime = 1080
	category = pop_assembly
	# is_essential = yes
	additional_ai_weight = 200
	ai_estimate_without_unemployment = yes
	
	position_priority = 10
	can_demolish = yes
	
	can_build = no
	
	potential = {
		exists = owner
		owner = {
			OR = {
				#has_origin = origin_crystal_gems
				is_geo_empire = yes
			} 
		}
	}
	
	allow = {
		owner = { has_technology = tech_housing_2 }		# make it so planet acension level 1 has to be reached for this
		OR = {
			has_deposit = d_kindergarten_small
			has_deposit = d_kindergarten_med
			has_deposit = d_kindergarten_large
		}
	}
	
	destroy_trigger = {
		owner = {
			NOR = {
				has_origin = origin_crystal_gems
				is_geo_empire = yes
			}
		}
	}
	
	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				is_geo_empire = yes
				NOT = { has_authority = auth_hive_mind }
			}			
		}
		modifier = { # Adjust for Balance
			job_kindergartener_add = 2
			planet_pop_assembly_organic_mult = 0.15
			job_roboticist_add = -2
		}
	}
	triggered_desc = {
		trigger = {
			exists = owner
			owner = {
				is_geo_empire = yes
				NOT = { has_authority = auth_hive_mind }
			}
		}
		text = job_kindergartener_effect_desc
	}
	
	triggered_planet_modifier = {
		potential = {
			owner = {
				has_authority = auth_hive_mind
			}
		}
		modifier = { # Adjust for Balance
			job_spawning_drone_add = 2
		}
	}
	
	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { has_origin = origin_crystal_gems }		
		}
		modifier = { # Adjust for Balance
			job_kindergartener_add = 3
			planet_amenities_add = 16
			job_roboticist_add = -2
		}
	}
	
	resources = {
		category = planet_buildings
		produces = {
		}
		upkeep = {
		energy =  1
		minerals =  @b3_upkeep
		}
		cost = {
		minerals = @b3_minerals
		}
	}
	ai_weight = {
		base = 1000
	}
}
building_crystal_gem_temple = {
	base_buildtime = @b1_time
	position_priority = 1
	
	category = amenity
	
	potential = {
		exists = owner
		NOT = { always = yes }
	}
	
	allow = {
		owner = { has_origin = origin_crystal_gems }
		NOT = { has_building = building_crystal_gem_temple }
	}
	
	
	planet_modifier = {
		planet_max_buildings_add = 1
		planet_amenities_add = 10
	}
	
	resources = {
		category = planet_buildings
		produces = {
		unity = 2
		energy = 2
		food = 2
		minerals = 2
		alloys = 2
		consumer_goods = 2
		}
		upkeep = {
		energy =  @b1_upkeep
		}
		cost = {
		minerals = @b1_minerals
		}
	}
}

building_gem_sky_arena = {
	
	base_buildtime = @b1_time
	position_priority = 200
	base_cap_amount = 1
	
	category = amenity
	
	potential = {
		exists = owner
		is_geo_empire = yes
	}
	
	ai_weight = {
		base = @forced_weight
		modifier = {
			factor = 0 
			has_building = building_gem_sky_arena
		}
	}

	resources = {
		category = planet_buildings
		produces = {
		unity = 6
		}
		upkeep = {
		energy =  @b1_upkeep
		}
		cost = {
		minerals = @b1_minerals
		}
	}
	
	 planet_modifier = {
		 planet_amenities_add = 5
	 }

	triggered_planet_modifier = {
		potential = {
			is_geo_empire = yes
		}
		modifier = { # Adjust for Balance
			job_duelist_add = 2
			job_technician_add = 1
		}
	}
	triggered_planet_modifier = {
		potential = {
			owner = {
				is_geo_empire = no
			}
		}
		modifier = { # Adjust for Balance
			job_duelist_add = 1
			job_scrap_miner_add = 1
		}
	}
	
}
# building_colony_shelter = {
	# capital = yes
	# can_build = no
	# can_demolish = no
	# can_be_ruined = no
	# can_be_disabled = no
	# position_priority = 0		# used to determine where to place the building in the building list. The lower the value, the closest to the beginning it'll be.
								# default value is 200, value for capital buildings is 0
								# if two building types have the same value, they'll be added in a first come first serve order, the newest ones being added at the end of that priority
								# upgrades of buildings don't use their own priority, but use that of their base building

	# category = government

	# optional: override base description with triggered ones
	# desc = {
	# 	trigger = {
	# 		<stuff: planet scope>
	# 	}
	# 	text = building_necrophage_elevation_chamber_desc
	# }

	# empire_limit = { 	#optional: default is no limit
	# 	base = 5		#don't set base to 0 or lower, it will ignore it (for performance optimisation reasons)
	# 	modifier = { 	#triggers are country scope
	# 		add/factor = 2
	# 		has_country_flag = test_flag
	# 	}
	#	# Mult by -1 to remove limit
	# }

	# potential = {
		# trigger for displaying building in construction list
	# }

	# allow = {
		# trigger for allowing/graying out building construction
	# }

	# abort_trigger = {
		# ongoing construction will be canceled if this trigger returns true
	# }

	# ruined_trigger = {
		# set building to ruined if this trigger returns true
	# }

	# destroy_trigger = {
		# building will be destroyed (more likely converted, see below)
		# if this trigger returns true
	# }

	# convert_to = {
		# lists candidates this can be converted to
		# if destroy_trigger returns true (e.g. post-conquest)
	# }

	# planet_modifier = {
		# planet_housing_add = 3
		# planet_amenities_add = 3
	# }

	# triggered_planet_modifier = {
		# potential = {
		#	exists = owner
		#	owner = { is_mechanical_empire = no }
		# }
		# job_colonist_add = 2
	# }

	# triggered_planet_modifier = {
		# as many as you like
	# }

	# country_modifier = {
		# country_resource_max_add = 2000
	# }

	# prerequisites = {
		# "tech_basic_industry"
	# }

	# resources = {
		# category = planet_buildings
		# upkeep = {
		#	energy = 1
		# }
		# cost = {
		#	minerals = 300
		# }
		# can also produce flat resources,
		# but we usually use planet_modifier for that
	# }

	# upgrades = {
		# building(s) this can be upgraded to
	# }

	#triggered_desc = { # text to display if trigger returns true
	#	trigger = {
	#		exists = owner
	#		owner = { is_mechanical_empire = yes }
	#	}
	#	text = job_roboticist_effect_desc
	#}

	#ai_weight: not used anymore unless you overwrite economic_plans to not be used.

	#on_queued = {
	#	owner = { remove_country_flag = artist_building_patron } #an action when queued
	#}
	#
	#on_unqueued = {
	#	owner = { set_country_flag = artist_building_patron } #an action when unqueued
	#}
	#
	#on_built = {
	#	owner = { set_country_flag = built_one_ministry } #an action when built
	#}
	#
	#on_destroy = {
	#	owner = { remove_country_flag = built_one_ministry } #an action when destroyed
	#}
#}
