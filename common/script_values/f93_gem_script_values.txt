
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { pop_amount > 1000 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 1000 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1


three_quarter_to_mid_game_year = {
	base = -1
	complex_trigger_modifier = {
		trigger = check_galaxy_setup_value
		parameters = {
			setting = mid_game_year
		}
		mode = mult
	}
	multiply = 3
	divide = 4
}

#Counts the number of Pops that arent gems
f93_local_pop_numbers = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		trigger_scope = planet
		parameters = {
			limit = {
				is_geoloid = no
			}
		}
		mode = add
	}
	divide = 100
}
f93_local_gem_numbers = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		trigger_scope = planet
		parameters = {
			limit = {
				is_geoloid = yes
			}
		}
		mode = add
	}
}
#Checks how many gem pops can be made on a planet
geoloid_potential = {
	base = @base_gem_capacity
	modifier = {
		has_building = building_buff_kindergarten2
		multiply = 2
	}
	modifier = {
		has_building = building_buff_kindergarten3
		multiply = 3
	}
	complex_trigger_modifier = {
		trigger = count_deposits
		parameters = {
			type = d_kindergarten
		}
		mode = add
		mult = @kindergarten_capacity
	}
	min = 0
}
geoloid_potential_left = {
	base = 0
	add = from.value:geoloid_potential
	subtract = from.gem_pops_made
	min = 0
}
num_diamonds = {
	complex_trigger_modifier = {
		trigger = count_owned_leader
		trigger_scope = owner
		parameters = {
			limit = {
				has_trait = trait_ruler_diamond
			}
		}
		mode = add
	}
	min = 1
}
num_gem_pops = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		trigger_scope = owner
		parameters = {
			limit = {
				is_geoloid = yes
			}
		}
		mode = add
	}
}
num_gem_pops_civilian = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		trigger_scope = owner
		parameters = {
			limit = {
				is_geoloid = yes
				is_pop_category = civilian
			}
		}
		mode = add
	}
}
num_gem_unemployed = {
	complex_trigger_modifier = {
		trigger = num_unemployed
		trigger_scope = owner
		mode = add
	}
}
white_diamond_court = {
	add = value:num_gem_pops
	multiply = value:white_diamond_strength # 0.9-1
	subtract = value:gem_off_color_pops_fraction # starts in era 2
	round = yes
	min = 1
	max = value:num_gem_pops
}
yellow_diamond_court = {
	add = value:num_gem_pops
	multiply = value:yellow_diamond_strength
	subtract = value:gem_off_color_pops_fraction # starts in era 2
	round = yes
	min = 1
	max = value:num_gem_pops
}
blue_diamond_court = {
	add = value:num_gem_pops
	multiply = value:blue_diamond_strength
	subtract = value:gem_off_color_pops_fraction # starts in era 2
	round = yes
	min = 1
	max = value:num_gem_pops
}
pink_diamond_court = {
	add = value:num_gem_pops
	multiply = value:pink_diamond_strength
	subtract = value:gem_off_color_pops_fraction # starts in era 2
	round = yes
	min = 1
	max = value:num_gem_pops
}
white_mod_scale = {
	add = value:white_diamond_court
	divide = 25000
	min = 0.05
	max = 1
}
yellow_mod_scale = {
	add = value:yellow_diamond_court
	divide = 25000
	min = 0.05
	max = 1
}
blue_mod_scale = {
	add = value:blue_diamond_court
	divide = 25000
	min = 0.05
	max = 1
}
pink_mod_scale = {
	add = value:pink_diamond_court
	divide = 25000
	min = 0.05
	max = 1
}
white_mod_percent = {
	add = value:white_diamond_court
	divide = 250
	min = 5
	max = 100
}
yellow_mod_percent = {
	add = value:yellow_diamond_court
	divide = 250
	min = 5
	max = 100
}
blue_mod_percent = {
	add = value:blue_diamond_court
	divide = 250
	min = 5
	max = 100
}
pink_mod_percent = {
	add = value:pink_diamond_court
	divide = 250
	min = 5
	max = 100
}